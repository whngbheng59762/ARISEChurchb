{"version":3,"sources":["../../src/middleware/session.middleware.js"],"names":["options","key","store","Store","ctx","next","id","cookies","get","session","old","destroy","length","set","sid","string","Buffer","toString","e","JSON","parse","obj","sync","decode","getID","encode"],"mappings":"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","file":"session.middleware.js","sourcesContent":["import uid from \"uid-safe\";\n\nclass Store {\n    constructor() {\n        this.session = {};\n    }\n\n    decode(string) {\n        if (!string) return \"\";\n\n        let session = \"\";\n\n        try {\n            session = new Buffer(string, \"base64\").toString();\n        } catch (e) {\n        }\n\n        return JSON.parse(session);\n    }\n\n    encode(obj) {\n        return new Buffer(obj).toString(\"base64\");\n    }\n\n    getID(length) {\n        return uid.sync(length);\n    }\n\n    async get(sid) {\n        return this.decode(this.session[sid]);\n    }\n\n    async set(session, options) {\n        options = options || {};\n        let sid = options.sid;\n        if (!sid) {\n            sid = this.getID(24);\n        }\n\n        this.session[sid] = this.encode(JSON.stringify(session));\n\n        return sid;\n    }\n\n    async destroy(sid) {\n        delete this.session[sid];\n    }\n}\n\nexport default function (options = {}) {\n\n    options.key = options.key || \"koa:sess\";\n    options.store = options.store || new Store();\n\n    return async function session(ctx, next) {\n        let id = ctx.cookies.get(options.key, options);\n\n        if (!id) {\n            ctx.session = {};\n        } else {\n            ctx.session = await options.store.get(id);\n            // check session should be a no-null object\n            if (typeof ctx.session !== \"object\" || ctx.session == null) {\n                ctx.session = {};\n            }\n        }\n\n        let old = JSON.stringify(ctx.session);\n\n        await next();\n\n        // if not changed\n        if (old == JSON.stringify(ctx.session)) return;\n\n        // clear old session if exists\n        if (id) {\n            await options.store.destroy(id);\n            id = null;\n        }\n\n        // set new session\n        if (ctx.session && Object.keys(ctx.session).length) {\n            let sid = await options.store.set(ctx.session, Object.assign({}, options, {sid: id}));\n            ctx.cookies.set(options.key, sid, options);\n        }\n    }\n}"]}