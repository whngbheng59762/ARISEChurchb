{"version":3,"sources":["../../src/middleware/http.middleware.js"],"names":["httpMiddleware","http","ctx","next","routers","koahub","configs","router","regexp","regres","index","url","path","method","params","keys","length","strict","exec","key","name","parseInt","isString","query","routerMethod","toLowerCase","originalPath","skip"],"mappings":";;;;;;;;;;;;;;;;;;QAQgBA,c,GAAAA,c;;AARhB;;AACA;;;;AACA;;;;AACA;;;;AACA;;AACA;;;;AAEA;AACO,SAASA,cAAT,GAA0B;;AAE7B,QAAMC;AAAA,8EAAO,iBAAgBC,GAAhB,EAAqBC,IAArB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAEHC,mCAFG,GAEOC,OAAOC,OAAP,CAAeC,MAFtB;AAILC,kCAJK,WAIGC,MAJH,WAIWC,KAJX,WAIkBC,GAJlB,WAIuBC,IAJvB,WAI6BC,MAJ7B,GAIsCX,IAAIW,MAJ1C,EAKLC,MALK,GAKI,EALJ,EAMLC,IANK,GAME,EANF;;AAAA,kCAQLX,WAAWA,QAAQY,MARd;AAAA;AAAA;AAAA;;AAAA,qEAScZ,OATd;;AAAA;AAAA;AAAA;AAAA;AAAA;;AASIG,kCATJ;;AAUDC,qCAAS,4BAAaJ,QAAQ,CAAR,CAAb,EAAyBW,IAAzB,EAA+B,EAACE,QAAQ,IAAT,EAA/B,CAAT;AACAR,qCAASD,OAAOU,IAAP,CAAYhB,IAAIU,IAAhB,CAAT;;AAXC,iCAaGH,MAbH;AAAA;AAAA;AAAA;;AAcG,iCAASU,GAAT,IAAgBJ,IAAhB,EAAsB;AAClBD,uCAAOC,KAAKI,GAAL,EAAUC,IAAjB,IAAyBX,OAAOY,SAASF,GAAT,IAAgB,CAAvB,CAAzB;AACH;AACDT,oCAAQH,MAAR;AAjBH;;AAAA;AAAA;AAAA;;AAAA;AAAA,iCAsBDG,KAtBC;AAAA;AAAA;AAAA;;AAuBKH,mCAvBL,GAuBcH,QAAQM,KAAR,EAAe,CAAf,CAvBd;;AAwBD,gCAAI,iBAAOY,QAAP,CAAgBf,OAAhB,CAAJ,EAA6B;AACzBK,uCAAOL,OAAP;AACAI,sCAAMJ,UAAS,yBAAc,gBAASL,IAAIS,GAAb,EAAkBY,KAAhC,EAAuCT,MAAvC,CAAf;AACH,6BAHD,MAGO;AACGU,4CADH,GACkBjB,QAAOM,OAAOY,WAAP,EAAP,CADlB;;AAEH,oCAAID,YAAJ,EAAkB;AACdZ,2CAAOY,YAAP;AACAb,0CAAMa,eAAe,yBAAc,gBAAStB,IAAIS,GAAb,EAAkBY,KAAhC,EAAuCT,MAAvC,CAArB;AACH,iCAHD,MAGO;AACH,mDAAU,kBAAV;AACH;AACJ;;AAnCA;AAAA,mCAqCK,qBAAU,sBAAcZ,GAAd,EAAmB,EAACwB,cAAcxB,IAAIU,IAAnB,EAAyBA,MAAMA,IAA/B,EAAqCD,KAAKA,GAA1C,EAAnB,CAAV,EAA8ER,IAA9E,CArCL;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,mCAuCK,qBAAUD,GAAV,EAAeC,IAAf,CAvCL;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,mCA0CC,qBAAUD,GAAV,EAAeC,IAAf,CA1CD;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAP;;AAAA;AAAA;AAAA;AAAA,OAAN;;AA8CAF,SAAK0B,IAAL;;AAEA,WAAO1B,IAAP;AACH","file":"http.middleware.js","sourcesContent":["import {parse as urlParse} from \"url\";\nimport pathToRegexp from \"path-to-regexp\";\nimport lodash from \"lodash\";\nimport skip from \"./skip.middleware\";\nimport {http as httpDebug} from \"./../util/log.util\";\nimport {runAction, urlObjToParam} from \"./../util/http.util\";\n\n// run http\nexport function httpMiddleware() {\n\n    const http = async function (ctx, next) {\n\n        const routers = koahub.configs.router;\n\n        let regexp, regres, index, url, path, method = ctx.method,\n            params = [],\n            keys = [];\n\n        if (routers && routers.length) {\n            for (let router in routers) {\n                regexp = pathToRegexp(routers[0], keys, {strict: true});\n                regres = regexp.exec(ctx.path);\n\n                if (regres) {\n                    for (var key in keys) {\n                        params[keys[key].name] = regres[parseInt(key) + 1];\n                    }\n                    index = router;\n                    break;\n                }\n            }\n\n            if (index) {\n                const router = routers[index][1];\n                if (lodash.isString(router)) {\n                    path = router;\n                    url = router + urlObjToParam(urlParse(ctx.url).query, params);\n                } else {\n                    const routerMethod = router[method.toLowerCase()];\n                    if (routerMethod) {\n                        path = routerMethod;\n                        url = routerMethod + urlObjToParam(urlParse(ctx.url).query, params);\n                    } else {\n                        httpDebug('Not Found Router');\n                    }\n                }\n\n                await runAction(Object.assign(ctx, {originalPath: ctx.path, path: path, url: url}), next);\n            } else {\n                await runAction(ctx, next);\n            }\n        } else {\n            await runAction(ctx, next);\n        }\n    };\n\n    http.skip = skip;\n\n    return http;\n}\n"]}