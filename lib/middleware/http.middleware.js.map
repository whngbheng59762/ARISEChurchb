{"version":3,"sources":["../../src/middleware/http.middleware.js"],"names":["httpMiddleware","http","ctx","next","routers","koahub","configs","router","regexp","regres","index","url","path","method","params","length","keys","strict","sensitive","exec","key","name","parseInt","isString","query","routerMethod","toLowerCase","originalPath","skip"],"mappings":";;;;;;;;;;;;;;;;;;kBAOwBA,c;;AAPxB;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AAEe,SAASA,cAAT,GAA0B;;AAErC,QAAMC;AAAA,8EAAO,iBAAgBC,GAAhB,EAAqBC,IAArB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAEHC,mCAFG,GAEOC,OAAOC,OAAP,CAAeC,MAFtB;AAILC,kCAJK,WAIGC,MAJH,WAIWC,KAJX,WAIkBC,GAJlB,WAIuBC,IAJvB,WAI6BC,MAJ7B,GAIsCX,IAAIW,MAJ1C,EAKLC,MALK,GAKI,EALJ;;AAAA,kCAOLV,WAAWA,QAAQW,MAPd;AAAA;AAAA;AAAA;;AAAA,qEAQcX,OARd;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAQIG,kCARJ;AAUGS,gCAVH,GAUU,EAVV;;AAWDR,qCAAS,4BAAaJ,QAAQG,MAAR,EAAgB,CAAhB,CAAb,EAAiCS,IAAjC,EAAuC,EAACC,QAAQ,IAAT,EAAeC,WAAW,IAA1B,EAAvC,CAAT;AACAT,qCAASD,OAAOW,IAAP,CAAYjB,IAAIU,IAAhB,CAAT;;AAZC,iCAcGH,MAdH;AAAA;AAAA;AAAA;;AAeG,iCAASW,GAAT,IAAgBJ,IAAhB,EAAsB;AAClBF,uCAAOE,KAAKI,GAAL,EAAUC,IAAjB,IAAyBZ,OAAOa,SAASF,GAAT,IAAgB,CAAvB,CAAzB;AACH;AACDV,oCAAQH,MAAR;AAlBH;;AAAA;AAAA;AAAA;;AAAA;AAAA,iCAuBDG,KAvBC;AAAA;AAAA;AAAA;;AAwBKH,mCAxBL,GAwBcH,QAAQM,KAAR,EAAe,CAAf,CAxBd;;AAAA,iCAyBG,iBAAOa,QAAP,CAAgBhB,OAAhB,CAzBH;AAAA;AAAA;AAAA;;AA0BGK,mCAAOL,OAAP;AACAI,kCAAMJ,UAAS,yBAAc,gBAASL,IAAIS,GAAb,EAAkBa,KAAhC,EAAuCV,MAAvC,CAAf;AA3BH;AAAA;;AAAA;AA6BSW,wCA7BT,GA6BwBlB,QAAOM,OAAOa,WAAP,EAAP,CA7BxB;;AAAA,iCA8BOD,YA9BP;AAAA;AAAA;AAAA;;AA+BOb,mCAAOa,YAAP;AACAd,kCAAMc,eAAe,yBAAc,gBAASvB,IAAIS,GAAb,EAAkBa,KAAhC,EAAuCV,MAAvC,CAArB;AAhCP;AAAA;;AAAA;AAkCO,+CAAI,kBAAJ;AAlCP;;AAAA;AAAA;AAAA,mCAuCK,qBAAU,sBAAcZ,GAAd,EAAmB,EAACyB,cAAczB,IAAIU,IAAnB,EAAyBA,MAAMA,IAA/B,EAAqCD,KAAKA,GAA1C,EAAnB,CAAV,EAA8ER,IAA9E,CAvCL;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,mCAyCK,qBAAUD,GAAV,EAAeC,IAAf,CAzCL;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,mCA4CC,qBAAUD,GAAV,EAAeC,IAAf,CA5CD;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAP;;AAAA;AAAA;AAAA;AAAA,OAAN;;AAgDAF,SAAK2B,IAAL;;AAEA,WAAO3B,IAAP;AACH","file":"http.middleware.js","sourcesContent":["import {parse as urlParse} from \"url\";\nimport pathToRegexp from \"path-to-regexp\";\nimport lodash from \"lodash\";\nimport skip from \"./skip.middleware\";\nimport log from \"./../util/log.util\";\nimport {runAction, urlObjToParam} from \"./../util/http.util\";\n\nexport default function httpMiddleware() {\n\n    const http = async function (ctx, next) {\n\n        const routers = koahub.configs.router;\n\n        let regexp, regres, index, url, path, method = ctx.method,\n            params = [];\n\n        if (routers && routers.length) {\n            for (let router in routers) {\n\n                let keys = [];\n                regexp = pathToRegexp(routers[router][0], keys, {strict: true, sensitive: true});\n                regres = regexp.exec(ctx.path);\n\n                if (regres) {\n                    for (var key in keys) {\n                        params[keys[key].name] = regres[parseInt(key) + 1];\n                    }\n                    index = router;\n                    break;\n                }\n            }\n\n            if (index) {\n                const router = routers[index][1];\n                if (lodash.isString(router)) {\n                    path = router;\n                    url = router + urlObjToParam(urlParse(ctx.url).query, params);\n                } else {\n                    const routerMethod = router[method.toLowerCase()];\n                    if (routerMethod) {\n                        path = routerMethod;\n                        url = routerMethod + urlObjToParam(urlParse(ctx.url).query, params);\n                    } else {\n                        log('Not Found Router');\n                        return;\n                    }\n                }\n\n                await runAction(Object.assign(ctx, {originalPath: ctx.path, path: path, url: url}), next);\n            } else {\n                await runAction(ctx, next);\n            }\n        } else {\n            await runAction(ctx, next);\n        }\n    };\n\n    http.skip = skip;\n\n    return http;\n}\n"]}