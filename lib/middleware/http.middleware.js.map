{"version":3,"sources":["../../src/middleware/http.middleware.js"],"names":["parse","urlParse","pathToRegexp","lodash","skip","http","httpDebug","runAction","urlObjToParam","httpMiddleware","ctx","next","routers","koahub","configs","router","regexp","regres","index","url","path","method","params","keys","length","exec","key","name","parseInt","isString","query","routerMethod","toLowerCase","Object","assign","originalPath"],"mappings":"AAAA,SAAQA,SAASC,QAAjB,QAAgC,KAAhC;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,OAAOC,IAAP,MAAiB,mBAAjB;AACA,SAAQC,QAAQC,SAAhB,QAAgC,oBAAhC;AACA,SAAQC,SAAR,EAAmBC,aAAnB,QAAuC,qBAAvC;;AAEA;AACA,OAAO,SAASC,cAAT,GAA0B;;AAE7B,UAAMJ,OAAO,gBAAgBK,GAAhB,EAAqBC,IAArB,EAA2B;;AAEpC,cAAMC,UAAUC,OAAOC,OAAP,CAAeC,MAA/B;;AAEA,YAAIC,MAAJ;AAAA,YAAYC,MAAZ;AAAA,YAAoBC,KAApB;AAAA,YAA2BC,GAA3B;AAAA,YAAgCC,IAAhC;AAAA,YAAsCC,SAASX,IAAIW,MAAnD;AAAA,YACIC,SAAS,EADb;AAAA,YAEIC,OAAO,EAFX;;AAIA,YAAIX,WAAWA,QAAQY,MAAvB,EAA+B;AAC3B,iBAAK,IAAIT,MAAT,IAAmBH,OAAnB,EAA4B;AACxBI,yBAASd,aAAaU,QAAQ,CAAR,CAAb,EAAyBW,IAAzB,CAAT;AACAN,yBAASD,OAAOS,IAAP,CAAYf,IAAIU,IAAhB,CAAT;;AAEA,oBAAIH,MAAJ,EAAY;AACR,yBAAK,IAAIS,GAAT,IAAgBH,IAAhB,EAAsB;AAClBD,+BAAOC,KAAKG,GAAL,EAAUC,IAAjB,IAAyBV,OAAOW,SAASF,GAAT,IAAgB,CAAvB,CAAzB;AACH;AACDR,4BAAQH,MAAR;AACA;AACH;AACJ;;AAED,gBAAIG,KAAJ,EAAW;AACP,sBAAMH,SAASH,QAAQM,KAAR,EAAe,CAAf,CAAf;AACA,oBAAIf,OAAO0B,QAAP,CAAgBd,MAAhB,CAAJ,EAA6B;AACzBK,2BAAOL,MAAP;AACAI,0BAAMJ,SAASP,cAAcP,SAASS,IAAIS,GAAb,EAAkBW,KAAhC,EAAuCR,MAAvC,CAAf;AACH,iBAHD,MAGO;AACH,0BAAMS,eAAehB,OAAOM,OAAOW,WAAP,EAAP,CAArB;AACA,wBAAID,YAAJ,EAAkB;AACdX,+BAAOW,YAAP;AACAZ,8BAAMY,eAAevB,cAAcP,SAASS,IAAIS,GAAb,EAAkBW,KAAhC,EAAuCR,MAAvC,CAArB;AACH,qBAHD,MAGO;AACHhB,kCAAU,kBAAV;AACH;AACJ;;AAED,sBAAMC,UAAU0B,OAAOC,MAAP,CAAcxB,GAAd,EAAmB,EAACyB,cAAczB,IAAIU,IAAnB,EAAyBA,MAAMA,IAA/B,EAAqCD,KAAKA,GAA1C,EAAnB,CAAV,EAA8ER,IAA9E,CAAN;AACH,aAhBD,MAgBO;AACH,sBAAMJ,UAAUG,GAAV,EAAeC,IAAf,CAAN;AACH;AACJ,SAjCD,MAiCO;AACH,kBAAMJ,UAAUG,GAAV,EAAeC,IAAf,CAAN;AACH;AACJ,KA5CD;;AA8CAN,SAAKD,IAAL,GAAYA,IAAZ;;AAEA,WAAOC,IAAP;AACH","file":"http.middleware.js","sourcesContent":["import {parse as urlParse} from \"url\";\nimport pathToRegexp from \"path-to-regexp\";\nimport lodash from \"lodash\";\nimport skip from \"./skip.middleware\";\nimport {http as httpDebug} from \"./../util/log.util\";\nimport {runAction, urlObjToParam} from \"./../util/http.util\";\n\n// run http\nexport function httpMiddleware() {\n\n    const http = async function (ctx, next) {\n\n        const routers = koahub.configs.router;\n\n        let regexp, regres, index, url, path, method = ctx.method,\n            params = [],\n            keys = [];\n\n        if (routers && routers.length) {\n            for (let router in routers) {\n                regexp = pathToRegexp(routers[0], keys);\n                regres = regexp.exec(ctx.path);\n\n                if (regres) {\n                    for (var key in keys) {\n                        params[keys[key].name] = regres[parseInt(key) + 1];\n                    }\n                    index = router;\n                    break;\n                }\n            }\n\n            if (index) {\n                const router = routers[index][1];\n                if (lodash.isString(router)) {\n                    path = router;\n                    url = router + urlObjToParam(urlParse(ctx.url).query, params);\n                } else {\n                    const routerMethod = router[method.toLowerCase()];\n                    if (routerMethod) {\n                        path = routerMethod;\n                        url = routerMethod + urlObjToParam(urlParse(ctx.url).query, params);\n                    } else {\n                        httpDebug('Not Found Router');\n                    }\n                }\n\n                await runAction(Object.assign(ctx, {originalPath: ctx.path, path: path, url: url}), next);\n            } else {\n                await runAction(ctx, next);\n            }\n        } else {\n            await runAction(ctx, next);\n        }\n    };\n\n    http.skip = skip;\n\n    return http;\n}\n"]}