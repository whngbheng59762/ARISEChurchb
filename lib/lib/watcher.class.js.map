{"version":3,"sources":["../../src/lib/watcher.class.js"],"names":["paths","watcher","watch","appPath","ignored","persistent","on","_path","stats","relativePath","relative","rootPath","runtimePath","replace","appName","runtimeName","undefined","restart","unlink","id","workers","kill"],"mappings":";;;;;;;;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;AAII,sBAAwB;AAAA;;AAAA,YAAZA,KAAY,uEAAJ,EAAI;AAAA;;;AAEpB,YAAMC,UAAU,mBAASC,KAAT,CAAeF,MAAMG,OAArB,EAA8B;AAC1CC,qBAAS,UADiC;AAE1CC,wBAAY;AAF8B,SAA9B,CAAhB;;AAKAJ,gBAAQK,EAAR,CAAW,KAAX,EAAkB,UAACC,KAAD,EAAQC,KAAR,EAAkB;;AAEhC,gBAAMC,eAAe,eAAKC,QAAL,CAAcV,MAAMW,QAApB,EAA8BJ,KAA9B,CAArB;AACA,gBAAMK,cAAcL,MAAMM,OAAN,OAAkBb,MAAMc,OAAxB,cAAwCd,MAAMe,WAA9C,OAApB;;AAEA;AACA,gBAAIP,SAASQ,SAAb,EAAwB;AACpB,gCAAMP,YAAN,EAAoB,KAApB;;AAEA,sBAAKQ,OAAL;AACH;AACJ,SAXD;;AAaAhB,gBAAQK,EAAR,CAAW,QAAX,EAAqB,UAACC,KAAD,EAAQC,KAAR,EAAkB;;AAEnC,gBAAMC,eAAe,eAAKC,QAAL,CAAcV,MAAMW,QAApB,EAA8BJ,KAA9B,CAArB;AACA,gBAAMK,cAAcL,MAAMM,OAAN,OAAkBb,MAAMc,OAAxB,cAAwCd,MAAMe,WAA9C,OAApB;;AAEA,4BAAMN,YAAN,EAAoB,QAApB;AACA,kBAAKQ,OAAL;AACH,SAPD;;AASAhB,gBAAQK,EAAR,CAAW,QAAX,EAAqB,UAACC,KAAD,EAAQC,KAAR,EAAkB;;AAEnC,gBAAMC,eAAe,eAAKC,QAAL,CAAcV,MAAMW,QAApB,EAA8BJ,KAA9B,CAArB;AACA,gBAAMK,cAAcL,MAAMM,OAAN,OAAkBb,MAAMc,OAAxB,cAAwCd,MAAMe,WAA9C,OAApB;;AAEA,yBAAGG,MAAH,CAAUN,WAAV,EAAuB,YAAM;;AAEzB,gCAAMH,YAAN,EAAoB,QAApB;AACA,sBAAKQ,OAAL;AACH,aAJD;AAKH,SAVD;AAWH;;;;kCAES;;AAEN,iBAAK,IAAIE,EAAT,IAAe,kBAAQC,OAAvB,EAAgC;AAC5B,kCAAQA,OAAR,CAAgBD,EAAhB,EAAoBE,IAApB;AACH;AACJ","file":"watcher.class.js","sourcesContent":["import chokidar from \"chokidar\";\nimport path from \"path\";\nimport fs from \"fs\";\nimport cluster from \"cluster\";\nimport {watch as debug} from \"./../util/log.util\";\n\nexport default class {\n\n    constructor(paths = {}) {\n\n        const watcher = chokidar.watch(paths.appPath, {\n            ignored: /[\\/\\\\]\\./,\n            persistent: true\n        });\n\n        watcher.on('add', (_path, stats) => {\n\n            const relativePath = path.relative(paths.rootPath, _path);\n            const runtimePath = _path.replace(`/${paths.appName}/`, `/${paths.runtimeName}/`);\n\n            // 新增文件stats undefined\n            if (stats == undefined) {\n                debug(relativePath, 'add');\n\n                this.restart();\n            }\n        });\n\n        watcher.on('change', (_path, stats) => {\n\n            const relativePath = path.relative(paths.rootPath, _path);\n            const runtimePath = _path.replace(`/${paths.appName}/`, `/${paths.runtimeName}/`);\n\n            debug(relativePath, 'change');\n            this.restart();\n        });\n\n        watcher.on('unlink', (_path, stats) => {\n\n            const relativePath = path.relative(paths.rootPath, _path);\n            const runtimePath = _path.replace(`/${paths.appName}/`, `/${paths.runtimeName}/`);\n\n            fs.unlink(runtimePath, () => {\n\n                debug(relativePath, 'unlink');\n                this.restart();\n            });\n        });\n    }\n\n    restart() {\n\n        for (let id in cluster.workers) {\n            cluster.workers[id].kill();\n        }\n    }\n}"]}