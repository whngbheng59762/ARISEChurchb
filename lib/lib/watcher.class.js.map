{"version":3,"sources":["../../src/lib/watcher.class.js"],"names":["paths","watcher","watch","appPath","ignored","persistent","unwatch","runtimeFile","children","require","cache","regExp","RegExp","runtimeName","key","test","id","on","_path","stats","relativePath","relative","rootPath","runtimePath","replace","appName","undefined","restart","masterSend","unlink","type","file","koahub","config","workers","send","name","setTimeout","msg"],"mappings":";;;;;;;;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;AAII,sBAAwB;AAAA;;AAAA,YAAZA,KAAY,uEAAJ,EAAI;AAAA;;;AAEpB,YAAMC,UAAU,mBAASC,KAAT,CAAeF,MAAMG,OAArB,EAA8B;AAC1CC,qBAAS,UADiC;AAE1CC,wBAAY;AAF8B,SAA9B,EAGbC,OAHa,CAGLN,MAAMO,WAHD,CAAhB,CAFoB,CAKU;;AAE9B;AACA,YAAMC,WAAWC,QAAQC,KAAR,CAAcV,MAAMO,WAApB,EAAiCC,QAAlD;AACA,YAAMG,SAAS,IAAIC,MAAJ,OAAeZ,MAAMa,WAArB,OAAf;AACA,aAAK,IAAIC,GAAT,IAAgBN,QAAhB,EAA0B;AACtB,gBAAIG,OAAOI,IAAP,CAAYP,SAASM,GAAT,EAAcE,EAA1B,CAAJ,EAAmC;AAC/Bf,wBAAQK,OAAR,CAAgBE,SAASM,GAAT,EAAcE,EAA9B;AACH;AACJ;;AAEDf,gBAAQgB,EAAR,CAAW,KAAX,EAAkB,UAACC,KAAD,EAAQC,KAAR,EAAkB;;AAEhC,gBAAMC,eAAe,eAAKC,QAAL,CAAcrB,MAAMsB,QAApB,EAA8BJ,KAA9B,CAArB;AACA,gBAAMK,cAAcL,MAAMM,OAAN,OAAkBxB,MAAMyB,OAAxB,cAAwCzB,MAAMa,WAA9C,OAApB;;AAEA;AACA,gBAAIM,SAASO,SAAb,EAAwB;AACpB,gCAAMN,YAAN,EAAoB,KAApB;;AAEA,sBAAKO,OAAL;AACA,sBAAKC,UAAL,CAAgB,KAAhB;AACH;AACJ,SAZD;;AAcA3B,gBAAQgB,EAAR,CAAW,QAAX,EAAqB,UAACC,KAAD,EAAQC,KAAR,EAAkB;;AAEnC,gBAAMC,eAAe,eAAKC,QAAL,CAAcrB,MAAMsB,QAApB,EAA8BJ,KAA9B,CAArB;AACA,gBAAMK,cAAcL,MAAMM,OAAN,OAAkBxB,MAAMyB,OAAxB,cAAwCzB,MAAMa,WAA9C,OAApB;;AAEA,4BAAMO,YAAN,EAAoB,QAApB;;AAEA,mCAAQG,WAAR;;AAEA,kBAAKI,OAAL;AACA,kBAAKC,UAAL,CAAgB,QAAhB,EAA0BL,WAA1B;AACH,SAXD;;AAaAtB,gBAAQgB,EAAR,CAAW,QAAX,EAAqB,UAACC,KAAD,EAAQC,KAAR,EAAkB;;AAEnC,gBAAMC,eAAe,eAAKC,QAAL,CAAcrB,MAAMsB,QAApB,EAA8BJ,KAA9B,CAArB;AACA,gBAAMK,cAAcL,MAAMM,OAAN,OAAkBxB,MAAMyB,OAAxB,cAAwCzB,MAAMa,WAA9C,OAApB;;AAEA,mCAAQU,WAAR;;AAEA,yBAAGM,MAAH,CAAUN,WAAV,EAAuB,YAAM;AACzB,gCAAMH,YAAN,EAAoB,QAApB;;AAEA,sBAAKO,OAAL;AACA,sBAAKC,UAAL,CAAgB,QAAhB,EAA0BL,WAA1B;AACH,aALD;AAMH,SAbD;AAcH;;AAED;;;;;mCACWO,I,EAAMC,I,EAAM;AACnB,gBAAIC,OAAOC,MAAP,CAAc,SAAd,CAAJ,EAA8B;AAC1B,qBAAK,IAAIjB,EAAT,IAAe,kBAAQkB,OAAvB,EAAgC;AAC5B,sCAAQA,OAAR,CAAgBlB,EAAhB,EAAoBmB,IAApB,CAAyB,EAACC,MAAM,MAAP,EAAeN,MAAMA,IAArB,EAA2BC,MAAMA,IAAjC,EAAzB;AACH;AACJ;AACJ;;AAED;;;;kCAmBU;;AAENM,uBAAW,YAAY;AACnB;AACH,aAFD,EAEG,GAFH;AAGH;;;kCAvBgBC,G,EAAK;AAClB,gBAAIA,IAAIR,IAAJ,IAAY,QAAhB,EAA0B;AACtB,uCAAQQ,IAAIP,IAAZ;AACH;;AAED,gBAAIO,IAAIR,IAAJ,IAAY,KAAhB,EAAuB,CAEtB;;AAED,gBAAIQ,IAAIR,IAAJ,IAAY,QAAhB,EAA0B;AACtB,uCAAQQ,IAAIP,IAAZ;AACH;;AAEDM,uBAAW,YAAY;AACnB;AACH,aAFD,EAEG,GAFH;AAGH","file":"watcher.class.js","sourcesContent":["import chokidar from \"chokidar\";\nimport decache from \"decache\";\nimport path from \"path\";\nimport fs from \"fs\";\nimport cluster from \"cluster\";\nimport Koahub from \"./../\";\nimport {watch as debug} from \"./../util/log.util\";\n\nexport default class {\n\n    constructor(paths = {}) {\n\n        const watcher = chokidar.watch(paths.appPath, {\n            ignored: /[\\/\\\\]\\./,\n            persistent: true\n        }).unwatch(paths.runtimeFile);// 移除启动主文件监控\n\n        // 移除启动文件依赖监控\n        const children = require.cache[paths.runtimeFile].children;\n        const regExp = new RegExp(`/${paths.runtimeName}/`);\n        for (let key in children) {\n            if (regExp.test(children[key].id)) {\n                watcher.unwatch(children[key].id);\n            }\n        }\n\n        watcher.on('add', (_path, stats) => {\n\n            const relativePath = path.relative(paths.rootPath, _path);\n            const runtimePath = _path.replace(`/${paths.appName}/`, `/${paths.runtimeName}/`);\n\n            // 新增文件stats undefined\n            if (stats == undefined) {\n                debug(relativePath, 'add');\n\n                this.restart();\n                this.masterSend('add');\n            }\n        });\n\n        watcher.on('change', (_path, stats) => {\n\n            const relativePath = path.relative(paths.rootPath, _path);\n            const runtimePath = _path.replace(`/${paths.appName}/`, `/${paths.runtimeName}/`);\n\n            debug(relativePath, 'change');\n\n            decache(runtimePath);\n\n            this.restart();\n            this.masterSend('change', runtimePath);\n        });\n\n        watcher.on('unlink', (_path, stats) => {\n\n            const relativePath = path.relative(paths.rootPath, _path);\n            const runtimePath = _path.replace(`/${paths.appName}/`, `/${paths.runtimeName}/`);\n\n            decache(runtimePath);\n\n            fs.unlink(runtimePath, () => {\n                debug(relativePath, 'unlink');\n\n                this.restart();\n                this.masterSend('unlink', runtimePath);\n            });\n        });\n    }\n\n    // master线程通知子线程\n    masterSend(type, file) {\n        if (koahub.config('cluster')) {\n            for (let id in cluster.workers) {\n                cluster.workers[id].send({name: 'file', type: type, file: file});\n            }\n        }\n    }\n\n    // worker线程收到消息通知\n    static workerGet(msg) {\n        if (msg.type == 'change') {\n            decache(msg.file);\n        }\n\n        if (msg.type == 'add') {\n\n        }\n\n        if (msg.type == 'unlink') {\n            decache(msg.file);\n        }\n\n        setTimeout(function () {\n            new Koahub();\n        }, 600);\n    }\n\n    restart() {\n\n        setTimeout(function () {\n            new Koahub();\n        }, 600);\n    }\n}"]}