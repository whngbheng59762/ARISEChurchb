{"version":3,"sources":["../../src/lib/hook.class.js"],"names":["Hook","ctx","next","hooks","name","arguments","length","key","action","add","push","test","runAction","args","i","path"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;IAEqBA,I;AACjB,kBAAYC,GAAZ,EAAiBC,IAAjB,EAAuB;AAAA;;;AAEnB,aAAKD,GAAL,GAAWA,GAAX;AACA,aAAKC,IAAL,GAAYA,IAAZ;;AAEA,aAAKC,KAAL,GAAa,EAAb;AACH;;;;4BAEGC,I,EAAM;;AAEN,gBAAIC,UAAUC,MAAV,IAAoB,CAAxB,EAA2B;AACvB,uBAAO,KAAKH,KAAZ;AACH,aAFD,MAEO;AACH,qBAAK,IAAII,GAAT,IAAgB,KAAKJ,KAArB,EAA4B;AACxB,wBAAIC,QAAQG,GAAZ,EAAiB;AACb,+BAAO,KAAKJ,KAAL,CAAWC,IAAX,CAAP;AACH;AACJ;AACJ;AACJ;;;4BAEGA,I,EAAMI,M,EAAQ;;AAEd,gBAAIC,MAAM,IAAV;AACA,iBAAK,IAAIF,GAAT,IAAgB,KAAKJ,KAArB,EAA4B;AACxB,oBAAIC,QAAQG,GAAZ,EAAiB;AACb,yBAAKJ,KAAL,CAAWI,GAAX,EAAgBG,IAAhB,CAAqBF,MAArB;AACAC,0BAAM,KAAN;AACH;AACJ;AACD,gBAAIA,GAAJ,EAAS;AACL,qBAAKN,KAAL,CAAWC,IAAX,IAAmB,CAACI,MAAD,CAAnB;AACH;AACJ;;;;mGAESJ,I;;;;;;;;;;;;;;;;yEAEU,KAAKD,K;;;;;;;;AAAZI,mC;;sCACDH,QAAQG,G;;;;;;;;;uEACW,KAAKJ,KAAL,CAAWI,GAAX,C;;;;;;;;AAAVC,sC;;qCACD,WAAWG,IAAX,CAAgBH,MAAhB,C;;;;;;uCAGM,KAAKI,SAAL,CAAeJ,MAAf,C;;;;;;;;AAGN;AACIK,oC,GAAO,E;;AACX,qCAASC,CAAT,GAAa,CAAb,EAAgBA,IAAI,MAAUR,MAA9B,EAAsCQ,GAAtC,EAA2C;AACvCD,yCAAKH,IAAL,CAAU,MAAUI,CAAV,CAAV;AACH;;uCACKN,wBAAUK,IAAV,C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;qGAOVE,I;;;;;;uCACN,qBAAU,sBAAc,KAAKd,GAAnB,EAAwB,EAACc,MAAMA,IAAP,EAAxB,CAAV,EAAiD,KAAKb,IAAtD,C;;;;;;;;;;;;;;;;;;;;kBA5DOF,I","file":"hook.class.js","sourcesContent":["import {runAction} from \"./../util/http.util\";\n\nexport default class Hook {\n    constructor(ctx, next) {\n\n        this.ctx = ctx;\n        this.next = next;\n\n        this.hooks = {};\n    }\n\n    get(name) {\n\n        if (arguments.length == 0) {\n            return this.hooks;\n        } else {\n            for (let key in this.hooks) {\n                if (name == key) {\n                    return this.hooks[name];\n                }\n            }\n        }\n    }\n\n    add(name, action) {\n\n        let add = true;\n        for (let key in this.hooks) {\n            if (name == key) {\n                this.hooks[key].push(action);\n                add = false;\n            }\n        }\n        if (add) {\n            this.hooks[name] = [action];\n        }\n    }\n\n    async run(name) {\n\n        for (let key in this.hooks) {\n            if (name == key) {\n                for (let action of this.hooks[key]) {\n                    if (/(\\/\\w+)+/.test(action)) {\n\n                        // run action\n                        await this.runAction(action);\n                    } else {\n\n                        // run functions\n                        let args = [];\n                        for (let i = 1; i < arguments.length; i++) {\n                            args.push(arguments[i]);\n                        }\n                        await action(...args);\n                    }\n                }\n            }\n        }\n    }\n\n    async runAction(path) {\n        await runAction(Object.assign(this.ctx, {path: path}), this.next);\n    }\n}\n"]}